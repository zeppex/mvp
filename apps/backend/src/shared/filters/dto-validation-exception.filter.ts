import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { Response } from 'express';

@Catch(BadRequestException)
export class DtoValidationExceptionFilter implements ExceptionFilter {
  private readonly logger = new Logger('DtoValidationFilter');

  catch(exception: BadRequestException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest();
    const status = exception.getStatus();
    const exceptionResponse = exception.getResponse() as any;

    // Enhanced logging for validation errors
    this.logger.error('🚨 DTO Validation Exception Caught!');
    this.logger.error(`📡 Request: ${request.method} ${request.url}`);
    this.logger.error(`⏰ Timestamp: ${new Date().toISOString()}`);
    
    if (request.body) {
      this.logger.error('📦 Request Body that caused error:');
      this.logger.error(JSON.stringify(request.body, null, 2));
    }

    // Check if it's a validation error
    const isValidationError = 
      exceptionResponse.message?.includes('Validation failed') ||
      Array.isArray(exceptionResponse.message) ||
      exceptionResponse.errors;

    if (isValidationError) {
      this.logger.error('🔍 This appears to be a DTO validation error');
      
      // Extract and log specific validation errors
      let validationErrors = [];
      if (Array.isArray(exceptionResponse.message)) {
        validationErrors = exceptionResponse.message;
      } else if (exceptionResponse.errors) {
        validationErrors = exceptionResponse.errors;
      }

      if (validationErrors.length > 0) {
        this.logger.error('📋 Specific validation errors:');
        validationErrors.forEach((error, index) => {
          this.logger.error(`   ${index + 1}. ${error}`);
        });
      }

      // Provide helpful suggestions
      this.provideSuggestions(request.body, request.url);
    }

    // Create a user-friendly error response
    const errorResponse = {
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: request.url,
      method: request.method,
      message: 'Request validation failed',
      details: isValidationError ? {
        type: 'VALIDATION_ERROR',
        errors: Array.isArray(exceptionResponse.message) 
          ? exceptionResponse.message 
          : [exceptionResponse.message],
        receivedData: request.body,
        suggestions: this.generateSuggestions(request.body, request.url),
      } : exceptionResponse,
    };

    response.status(status).json(errorResponse);
  }

  private provideSuggestions(body: any, url: string): void {
    this.logger.error('💡 Suggestions to fix the issue:');
    
    if (url.includes('/merchants') && body) {
      const bodyKeys = Object.keys(body);
      
      // Check for common problematic fields
      if (bodyKeys.includes('isActive')) {
        this.logger.error('   🚫 Remove "isActive" field - it\'s not allowed in CreateMerchantDto');
      }
      
      if (bodyKeys.includes('id')) {
        this.logger.error('   🚫 Remove "id" field - it\'s auto-generated by the backend');
      }
      
      if (bodyKeys.includes('createdAt') || bodyKeys.includes('updatedAt')) {
        this.logger.error('   🚫 Remove timestamp fields - they\'re auto-managed by the backend');
      }
      
      // Check for required fields
      const requiredFields = ['name', 'address', 'contact', 'contactName', 'contactPhone'];
      const missingFields = requiredFields.filter(field => !bodyKeys.includes(field));
      
      if (missingFields.length > 0) {
        this.logger.error(`   📝 Add missing required fields: ${missingFields.join(', ')}`);
      }
      
      // Check email format
      if (body.contact && typeof body.contact === 'string' && !body.contact.includes('@')) {
        this.logger.error('   📧 Ensure "contact" field contains a valid email address');
      }
    }
    
    this.logger.error('   📚 Refer to API documentation for correct DTO structure');
    this.logger.error('   🔗 Check Swagger docs at /api/v1/docs for field requirements');
  }

  private generateSuggestions(body: any, url: string): string[] {
    const suggestions: string[] = [];
    
    if (url.includes('/merchants') && body) {
      const bodyKeys = Object.keys(body);
      
      if (bodyKeys.includes('isActive')) {
        suggestions.push('Remove "isActive" field - not allowed in CreateMerchantDto');
      }
      
      if (bodyKeys.includes('id')) {
        suggestions.push('Remove "id" field - auto-generated by backend');
      }
      
      const requiredFields = ['name', 'address', 'contact', 'contactName', 'contactPhone'];
      const missingFields = requiredFields.filter(field => !bodyKeys.includes(field));
      
      if (missingFields.length > 0) {
        suggestions.push(`Add missing required fields: ${missingFields.join(', ')}`);
      }
      
      if (body.contact && typeof body.contact === 'string' && !body.contact.includes('@')) {
        suggestions.push('Ensure "contact" field contains a valid email address');
      }
    }
    
    if (suggestions.length === 0) {
      suggestions.push('Check API documentation for correct request format');
      suggestions.push('Verify all required fields are included and properly formatted');
    }
    
    return suggestions;
  }
}
